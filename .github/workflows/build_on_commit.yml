name: Compile and release

on:
  push:
    branches: master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    permissions:
      contents: write

    steps:
      - name: Set environment variables
        run: echo SCRIPTS_PATH=$(pwd) >> $GITHUB_ENV

      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v2

      - name: Install dependencies
        run: go mod download
        working-directory: ${{ env.SCRIPTS_PATH }}
      
      - name: Compile.
        run: |
          set GOARCH=amd64
          set GOOS=linux
          go build

          set GOARCH=amd64
          set GOOS=windows
          go build
        working-directory: ${{ env.SCRIPTS_PATH }}

      - name: Install linux dependency for toml
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Compile plugins
        run: |
          mkdir ../plugins
          for plugin in $(jq -r '.Compile.plugins[]' ../sp.toml); do
            spcomp -w234 -O2 -v2 -i"include" -o"../plugins/${plugin}.smx" "${plugin}.sp"
          done
        working-directory: ${{ env.SCRIPTS_PATH }}/scripting

      - name: Install zip
        uses: montudor/action-zip@v1

      - name: Zip output
        run: |
          zip -qq -y -r AllClassReviveMarker-${{ steps.setup_sp.outputs.plugin-version }}.zip configs plugins scripting extensions gamedata translations data -x "scripting/include/*"
        working-directory: ${{ env.SCRIPTS_PATH }}

      - name: Create Release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ steps.setup_sp.outputs.plugin-version }}
          artifacts: "./AllClassReviveMarker-${{ steps.setup_sp.outputs.plugin-version }}.zip"
          body: ${{ steps.changelog.outputs.changes }}
          draft: false
          allowUpdates: true
          prerelease: false
          replacesArtifacts: true 