name: Compile and release

on:
  push:
    branches: master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    permissions:
      contents: write
    if: "!contains(github.event.head_commit.message, '[ci]')"

    steps:
      - uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          echo "SCRIPTS_PATH=$(pwd)" >> $GITHUB_ENV
          echo "PLUGIN_NAME_ENV=${{ github.event.repository.name }}" >> $GITHUB_ENV

      - name: Setup SourcePawn Compiler ${{ matrix.SM_VERSION }}
        id: setup_sp
        uses: rumblefrog/setup-sp@master
        with:
          version: "1.11.x"
          version-file: ./scripting/${{ env.PLUGIN_NAME_ENV }}.sp
      
      - name: Download the includes downloader
        run: |
          gh release download --repo Zabaniya001/SPDependy --pattern "SPDependyLinux"
          chmod +x SPDependyLinux
        working-directory: ${{ env.SCRIPTS_PATH }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install the SourcePawn includes.
        run: ./SPDependyLinux ${{ secrets.GITHUB_TOKEN }}
        working-directory: ${{ env.SCRIPTS_PATH }}

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Download toml parser
        run: |
          pip install jq
          pip install yq

      - name: Compile plugins
        run: |
          mkdir plugins
          for plugin in $(tomlq '.Compile.plugins[]' sp.toml | cut -d'"' -f2); do
            spcomp -w234 -O2 -v2 -i"scripting/include" -i".temp/include" -o"plugins/${plugin}.smx" "scripting/${plugin}.sp"
          done
        working-directory: ${{ env.SCRIPTS_PATH }}

      - name: Install zip
        uses: montudor/action-zip@v1

      - name: Zip output
        run: |
          zip -qq -y -r ${{ github.event.repository.name }}-${{ steps.setup_sp.outputs.plugin-version }}.zip configs plugins scripting extensions gamedata translations data
        working-directory: ${{ env.SCRIPTS_PATH }}

      - name: Create Release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ steps.setup_sp.outputs.plugin-version }}
          artifacts: "./${{ github.event.repository.name }}-${{ steps.setup_sp.outputs.plugin-version }}.zip"
          body: ${{ steps.changelog.outputs.changes }}
          draft: false
          allowUpdates: true
          prerelease: false
          replacesArtifacts: true